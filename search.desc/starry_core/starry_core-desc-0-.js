searchState.loadedDescShard("starry_core", 0, "The core functionality of a monolithic kernel, including …\nUser address space management.\nResource management.\nUser task management.\nEnables scoped access into user memory, allowing page …\nIf the target architecture requires it, the kernel portion …\nCheck if the current thread is accessing user memory.\nLoad the user app to the user address space.\nMap the signal trampoline to the user address space.\nCreates a new empty user address space.\nResource limit structure representing soft and hard limits.\nProcess resource limits collection.\nThe current (soft) limit\nCreates a default set of resource limits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a resource limit where both soft and hard limits …\nGets a reference to the resource limit for the specified …\nGets a mutable reference to the resource limit for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum (hard) limit\nCreates a new resource limit with specified soft and hard …\nExtended data for <code>Process</code>.\nTask extended data for the monolithic kernel.\nExtended data for <code>Thread</code>.\nAdd the thread and possibly its process, process group and …\nThe virtual memory address space.\nThe child exit wait queue\nGet the clear child tid field.\nThe clear thread tid field\nThe executable path\nThe exit signal of the thread\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the bottom address of the user heap.\nGet the top address of the user heap.\nGet the <code>Process</code> associated with the given pid.\nGet the <code>ProcessGroup</code> associated with the given pgid.\nGet the <code>Session</code> associated with the given sid.\nGet the <code>Thread</code> associated with the given tid.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinux manual: A “clone” child is one which delivers no …\nCreate a new <code>TaskExt</code>.\nCreate a new <code>ThreadData</code>.\nCreate a new <code>ProcessData</code>.\nCreate a new user task.\nThe resource namespace\nGet the <code>ProcessData</code> associated with this task.\nGet all processes.\nThe process resource limits\nSet the clear child tid field.\nSet the bottom address of the user heap.\nSet the top address of the user heap.\nThe thread signal manager\nThe process signal manager\nThe thread\nGet the <code>ThreadData</code> associated with this task.\nThe time statistics\nUpdate the time statistics to reflect a switch from kernel …\nUpdate the time statistics to reflect a switch from user …\nGet the time statistics for the current task.")