searchState.loadedDescShard("axsignal", 0, "Continue the process if stopped.\nContinue the process if stopped.\nGenerate a core dump and terminate the process.\nTerminate the process and generate a core dump.\nUse the default signal action.\nA signal handler is pushed into the signal stack. The OS …\nCustom signal handler.\nIgnore the signal.\nIgnore the signal.\nStructure to record pending signals.\nSignal action. Corresponds to <code>struct sigaction</code> in libc.\nSignal information. Compatible with <code>struct siginfo</code> in libc.\nSignal action that should be properly handled by the OS.\nSignal set. Compatible with <code>struct sigset_t</code> in libc.\nSignal stack. Compatible with <code>struct sigaltstack</code> in libc.\nSignal number.\nStop the process.\nStop the process.\nTerminate the process.\nTerminate the process.\nAdds a signal to the set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDequeues the a signal in <code>mask</code> from this set, if any.\nDequeues the next pending signal contained in <code>mask</code>, if any.\nThe intersection of a source flags value with the …\nChecks if signal stack is disabled.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nTry to create Self from the raw representation\nChecks if the set contains a signal.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPuts a signal into the pending queue.\nThe intersection of a source flags value with the …\nRemoves a signal from the set.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe pending signals.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nWrite ctype representation.\nWrite ctype representation.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nProcess-level signal manager.\nSignal actions for a process.\nThread-level signal manager.\nA wait queue of threads.\nThe signal actions\nGets the blocked signals.\nChecks pending signals and handle them.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new process signal manager.\nNotifies all waiting threads.\nNotifies a waiting thread.\nGets currently pending signals.\nGets current pending signals.\nRestores the signal frame. Called by <code>sigreutrn</code>.\nSends a signal to the process.\nSends a signal to the thread.\nGets the signal stack.\nWaits for a notification.\nSuspends current task until a signal is delivered. Note …\nWaits for a notification, with an optional timeout.\nSuspends execution of the calling thread until one of the …\nApplies a function to the blocked signals.\nApplies a function to the signal stack.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")